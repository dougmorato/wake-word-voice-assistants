substitutions:
  name: m5stack-atoms3r-ai
  friendly_name: M5Stack AtomS3R-AI
  # Downscaled illustrations (128x128) hosted in your repo
  loading_illustration_file: https://github.com/dougmorato/wake-word-voice-assistants/raw/main/casita/loading_128_128.png
  idle_illustration_file: https://github.com/dougmorato/wake-word-voice-assistants/raw/main/casita/idle_128_128.png
  listening_illustration_file: https://github.com/dougmorato/wake-word-voice-assistants/raw/main/casita/listening_128_128.png
  thinking_illustration_file: https://github.com/dougmorato/wake-word-voice-assistants/raw/main/casita/thinking_128_128.png
  replying_illustration_file: https://github.com/dougmorato/wake-word-voice-assistants/raw/main/casita/replying_128_128.png
  error_illustration_file: https://github.com/dougmorato/wake-word-voice-assistants/raw/main/casita/error_128_128.png
  timer_finished_illustration_file: https://github.com/dougmorato/wake-word-voice-assistants/raw/main/casita/timer_finished_128_128.png

  loading_illustration_background_color: "000000"
  idle_illustration_background_color: "000000"
  listening_illustration_background_color: "FFFFFF"
  thinking_illustration_background_color: "FFFFFF"
  replying_illustration_background_color: "FFFFFF"
  error_illustration_background_color: "000000"

  voice_assist_idle_phase_id: "1"
  voice_assist_listening_phase_id: "2"
  voice_assist_thinking_phase_id: "3"
  voice_assist_replying_phase_id: "4"
  voice_assist_not_ready_phase_id: "10"
  voice_assist_error_phase_id: "11"
  voice_assist_muted_phase_id: "12"
  voice_assist_timer_finished_phase_id: "20"

esphome:
  name: ${name}
  friendly_name: ${friendly_name}
  min_version: 2025.5.0
  name_add_mac_suffix: true
  on_boot:
    priority: 600
    then:
      - display.page.show: initializing_page
      - component.update: atoms3r_lcd

esp32:
  board: esp32-s3-devkitc-1
  flash_size: 8MB
  cpu_frequency: 240MHz
  framework:
    type: esp-idf
    sdkconfig_options:
      CONFIG_ESP32S3_DEFAULT_CPU_FREQ_240: "y"
      CONFIG_ESP32S3_DATA_CACHE_64KB: "y"
      CONFIG_ESP32S3_DATA_CACHE_LINE_64B: "y"

psram:
  mode: octal
  speed: 80MHz

logger:
  hardware_uart: USB_SERIAL_JTAG

api:
  on_client_connected:
    - script.execute: draw_display
  on_client_disconnected:
    - lambda: id(voice_assistant_phase) = ${voice_assist_not_ready_phase_id};
    - script.execute: draw_display

ota:
  - platform: esphome
    id: ota_esphome

wifi:
  ap:
  on_connect:
    - script.execute: draw_display
  on_disconnect:
    - script.execute: draw_display

captive_portal:

# I2C bus used by ES8311 codec and IO expander on Atomic Echo Base
i2c:
  sda: GPIO38
  scl: GPIO39

# I2S bus (Atomic Echo Base)
i2s_audio:
  - id: i2s_bus
    i2s_lrclk_pin: GPIO6    # WS/LRCK
    i2s_bclk_pin: GPIO8     # BCLK/SCK
    # MCLK is not used on the Echo Base (codec derives clock from BCLK)

# ES8311 codec (handles both DAC + mic ADC)
audio_dac:
  - platform: es8311
    id: es8311_codec
    sample_rate: 16000
    bits_per_sample: 16bit
    use_mclk: false
    use_microphone: true
    mic_gain: 0DB

microphone:
  - platform: i2s_audio
    id: atoms3r_mic
    i2s_audio_id: i2s_bus
    i2s_din_pin: GPIO7      # ASDOUT (codec -> MCU)
    adc_type: external
    sample_rate: 16000
    bits_per_sample: 16bit

speaker:
  - platform: i2s_audio
    id: atoms3r_speaker
    i2s_audio_id: i2s_bus
    i2s_dout_pin: GPIO5     # SD/DSDIN (MCU -> codec)
    dac_type: external
    sample_rate: 16000
    bits_per_sample: 16bit
    channel: mono
    audio_dac: es8311_codec
    buffer_duration: 60ms

media_player:
  - platform: speaker
    id: media
    name: None
    codec_support_enabled: false
    buffer_size: 6000
    volume_min: 0.4
    announcement_pipeline:
      speaker: atoms3r_speaker
      format: WAV
      sample_rate: 16000
      num_channels: 1
    files:
      - id: timer_finished_wave_file
        file: https://github.com/esphome/wake-word-voice-assistants/raw/main/sounds/timer_finished.wav
    on_announcement:
      - if:
          condition:
            - microphone.is_capturing:
          then:
            - script.execute: stop_wake_word
    on_idle:
      - script.execute: start_wake_word

micro_wake_word:
  on_wake_word_detected:
    - voice_assistant.start:
        wake_word: !lambda return wake_word;
  vad:
  models:
    - model: okay_nabu
    - model: hey_mycroft
    - model: hey_jarvis

voice_assistant:
  id: va
  microphone: atoms3r_mic
  media_player: media
  micro_wake_word:
  noise_suppression_level: 2
  auto_gain: 31dBFS
  volume_multiplier: 2.0
  on_listening:
    - lambda: id(voice_assistant_phase) = ${voice_assist_listening_phase_id};
    - text_sensor.template.publish:
        id: text_request
        state: "..."
    - text_sensor.template.publish:
        id: text_response
        state: "..."
    - script.execute: draw_display
  on_stt_vad_end:
    - lambda: id(voice_assistant_phase) = ${voice_assist_thinking_phase_id};
    - script.execute: draw_display
  on_stt_end:
    - text_sensor.template.publish:
        id: text_request
        state: !lambda 'return x;'
    - script.execute: draw_display
  on_tts_start:
    - text_sensor.template.publish:
        id: text_response
        state: !lambda 'return x;'
    - lambda: id(voice_assistant_phase) = ${voice_assist_replying_phase_id};
    - script.execute: draw_display
  on_end:
    - wait_until:
        condition:
          - media_player.is_announcing:
        timeout: 0.5s
    - wait_until:
        - and:
            - not:
                media_player.is_announcing:
            - not:
                speaker.is_playing:
    - if:
        condition:
          - lambda: return id(wake_word_engine_location).state == "On device";
        then:
          - lambda: id(va).set_use_wake_word(false);
          - micro_wake_word.start:
    - script.execute: set_idle_or_mute_phase
    - script.execute: draw_display
    - text_sensor.template.publish:
        id: text_request
        state: ""
    - text_sensor.template.publish:
        id: text_response
        state: ""
  on_error:
    - lambda: id(voice_assistant_phase) = ${voice_assist_error_phase_id};
    - script.execute: draw_display
    - delay: 1s
    - script.execute: set_idle_or_mute_phase
    - script.execute: draw_display
  on_client_connected:
    - script.execute: start_wake_word
    - script.execute: set_idle_or_mute_phase
    - script.execute: draw_display
  on_client_disconnected:
    - script.execute: stop_wake_word
    - lambda: id(voice_assistant_phase) = ${voice_assist_not_ready_phase_id};
    - script.execute: draw_display
  on_timer_finished:
    - script.execute: stop_wake_word
    - wait_until:
        not:
          microphone.is_capturing:
    - switch.turn_on: timer_ringing

switch:
  - platform: template
    id: timer_ringing
    optimistic: true
    restore_mode: ALWAYS_OFF
    on_turn_off:
      # Stop the announcement
      - media_player.stop:
          announcement: true
    on_turn_on:
      - media_player.speaker.play_on_device_media_file:
          media_file: timer_finished_wave_file
          announcement: true
      - delay: 15min
      - switch.turn_off: timer_ringing

select:
  - platform: template
    entity_category: config
    name: Wake word engine location
    id: wake_word_engine_location
    optimistic: true
    restore_value: true
    options:
      - In Home Assistant
      - On device
    initial_option: On device
    on_value:
      - if:
          condition:
            lambda: return x == "In Home Assistant";
          then:
            - micro_wake_word.stop:
            - delay: 500ms
            - lambda: id(va).set_use_wake_word(true);
            - voice_assistant.start_continuous:
      - if:
          condition:
            lambda: return x == "On device";
          then:
            - lambda: id(va).set_use_wake_word(false);
            - voice_assistant.stop:
            - delay: 500ms
            - micro_wake_word.start:

button:
  - platform: factory_reset
    id: factory_reset_btn
    name: Factory reset

# Front button (GPIO41) active low
binary_sensor:
  - platform: gpio
    pin:
      number: GPIO41
      mode: INPUT_PULLUP
      inverted: true
    name: Button
    disabled_by_default: true
    entity_category: diagnostic
    id: atoms3r_button
    on_multi_click:
      - timing:
          - ON for at least 50ms
          - OFF for at least 50ms
        then:
          - if:
              condition:
                switch.is_on: timer_ringing
              then:
                - switch.turn_off: timer_ringing
              else:
                - script.execute: start_wake_word
      - timing:
          - ON for at least 10s
        then:
          - button.press: factory_reset_btn

spi:
  - id: lcd_spi
    clk_pin: GPIO15
    mosi_pin: GPIO21

color:
  - id: idle_color
    hex: ${idle_illustration_background_color}
  - id: listening_color
    hex: ${listening_illustration_background_color}
  - id: thinking_color
    hex: ${thinking_illustration_background_color}
  - id: replying_color
    hex: ${replying_illustration_background_color}
  - id: loading_color
    hex: ${loading_illustration_background_color}
  - id: error_color
    hex: ${error_illustration_background_color}

image:
  - file: ${error_illustration_file}
    id: casita_error
    resize: 128x128
    type: RGB
    transparency: alpha_channel
  - file: ${idle_illustration_file}
    id: casita_idle
    resize: 128x128
    type: RGB
    transparency: alpha_channel
  - file: ${listening_illustration_file}
    id: casita_listening
    resize: 128x128
    type: RGB
    transparency: alpha_channel
  - file: ${thinking_illustration_file}
    id: casita_thinking
    resize: 128x128
    type: RGB
    transparency: alpha_channel
  - file: ${replying_illustration_file}
    id: casita_replying
    resize: 128x128
    type: RGB
    transparency: alpha_channel
  - file: ${timer_finished_illustration_file}
    id: casita_timer_finished
    resize: 128x128
    type: RGB
    transparency: alpha_channel
  - file: ${loading_illustration_file}
    id: casita_initializing
    resize: 128x128
    type: RGB
    transparency: alpha_channel
  - file: https://github.com/dougmorato/wake-word-voice-assistants/raw/main/error_box_illustrations/error-no-wifi.png
    id: error_no_wifi
    resize: 128x128
    type: RGB
    transparency: alpha_channel
  - file: https://github.com/dougmorato/wake-word-voice-assistants/raw/main/error_box_illustrations/error-no-ha.png
    id: error_no_ha
    resize: 128x128
    type: RGB
    transparency: alpha_channel

display:
  - platform: st7789v
    id: atoms3r_lcd
    cs_pin: GPIO14
    dc_pin: GPIO42
    reset_pin: GPIO48
    data_rate: 40MHz
    model: CUSTOM
    width: 128
    height: 128
    offset_width: 0
    offset_height: 32
    update_interval: never
    pages:
      - id: idle_page
        lambda: |-
          it.fill(id(idle_color));
          it.image((it.get_width() / 2), (it.get_height() / 2), id(casita_idle), ImageAlign::CENTER);
      - id: listening_page
        lambda: |-
          it.fill(id(listening_color));
          it.image((it.get_width() / 2), (it.get_height() / 2), id(casita_listening), ImageAlign::CENTER);
      - id: thinking_page
        lambda: |-
          it.fill(id(thinking_color));
          it.image((it.get_width() / 2), (it.get_height() / 2), id(casita_thinking), ImageAlign::CENTER);
          it.filled_rectangle(5 , 5 , 118 , 24 , Color::WHITE );
          it.rectangle(5 , 5 , 118 , 24 , Color::BLACK );
          it.printf(8, 10, id(font_tiny), Color::BLACK, "%s", id(text_request).state.c_str());
      - id: replying_page
        lambda: |-
          it.fill(id(replying_color));
          it.image((it.get_width() / 2), (it.get_height() / 2), id(casita_replying), ImageAlign::CENTER);
          it.filled_rectangle(5 , 5 , 118 , 24 , Color::WHITE );
          it.rectangle(5 , 5 , 118 , 24 , Color::BLACK );
          it.filled_rectangle(5 , 99 , 118 , 24 , Color::WHITE );
          it.rectangle(5 , 99 , 118 , 24 , Color::BLACK );
          it.printf(8, 10, id(font_tiny), Color::BLACK, "%s", id(text_request).state.c_str());
          it.printf(8, 104, id(font_tiny), Color::BLACK, "%s", id(text_response).state.c_str());
      - id: timer_finished_page
        lambda: |-
          it.fill(id(idle_color));
          it.image((it.get_width() / 2), (it.get_height() / 2), id(casita_timer_finished), ImageAlign::CENTER);
      - id: error_page
        lambda: |-
          it.fill(id(error_color));
          it.image((it.get_width() / 2), (it.get_height() / 2), id(casita_error), ImageAlign::CENTER);
      - id: no_ha_page
        lambda: |-
          it.image((it.get_width() / 2), (it.get_height() / 2), id(error_no_ha), ImageAlign::CENTER);
      - id: no_wifi_page
        lambda: |-
          it.image((it.get_width() / 2), (it.get_height() / 2), id(error_no_wifi), ImageAlign::CENTER);
      - id: initializing_page
        lambda: |-
          it.fill(id(loading_color));
          it.image((it.get_width() / 2), (it.get_height() / 2), id(casita_initializing), ImageAlign::CENTER);
      - id: muted_page
        lambda: |-
          it.fill(Color::BLACK);

font:
  - id: font_small
    file:
      type: gfonts
      family: Figtree
      weight: 400
    size: 16
  - id: font_tiny
    file:
      type: gfonts
      family: Figtree
      weight: 300
    size: 12

text_sensor:
  - id: text_request
    platform: template
    on_value:
      lambda: |-
        if(id(text_request).state.length()>16) {
          std::string s = id(text_request).state.c_str();
          std::string t = esphome::str_truncate(s.c_str(),15);
          id(text_request).state = (t+"...").c_str();
        }
  - id: text_response
    platform: template
    on_value:
      lambda: |-
        if(id(text_response).state.length()>16) {
          std::string s = id(text_response).state.c_str();
          std::string t = esphome::str_truncate(s.c_str(),15);
          id(text_response).state = (t+"...").c_str();
        }

globals:
  - id: voice_assistant_phase
    type: int
    restore_value: false
    initial_value: ${voice_assist_not_ready_phase_id}

script:
  - id: set_idle_or_mute_phase
    then:
      - lambda: id(voice_assistant_phase) = ${voice_assist_idle_phase_id};
  - id: draw_display
    then:
      - if:
          condition:
            wifi.connected:
          then:
            - if:
                condition:
                  api.connected:
                then:
                  - lambda: |
                      switch(id(voice_assistant_phase)) {
                        case ${voice_assist_listening_phase_id}:
                          id(atoms3r_lcd).show_page(listening_page);
                          id(atoms3r_lcd).update();
                          break;
                        case ${voice_assist_thinking_phase_id}:
                          id(atoms3r_lcd).show_page(thinking_page);
                          id(atoms3r_lcd).update();
                          break;
                        case ${voice_assist_replying_phase_id}:
                          id(atoms3r_lcd).show_page(replying_page);
                          id(atoms3r_lcd).update();
                          break;
                        case ${voice_assist_error_phase_id}:
                          id(atoms3r_lcd).show_page(error_page);
                          id(atoms3r_lcd).update();
                          break;
                        case ${voice_assist_muted_phase_id}:
                          id(atoms3r_lcd).show_page(muted_page);
                          id(atoms3r_lcd).update();
                          break;
                        case ${voice_assist_not_ready_phase_id}:
                          id(atoms3r_lcd).show_page(no_ha_page);
                          id(atoms3r_lcd).update();
                          break;
                        case ${voice_assist_timer_finished_phase_id}:
                          id(atoms3r_lcd).show_page(timer_finished_page);
                          id(atoms3r_lcd).update();
                          break;
                        default:
                          id(atoms3r_lcd).show_page(idle_page);
                          id(atoms3r_lcd).update();
                      }
                else:
                  - display.page.show: no_ha_page
                  - component.update: atoms3r_lcd
          else:
            - display.page.show: no_wifi_page
            - component.update: atoms3r_lcd
  - id: start_wake_word
    then:
      - if:
          condition:
            and:
              - not:
                  - voice_assistant.is_running:
              - lambda: return id(wake_word_engine_location).state == "On device";
          then:
            - lambda: id(va).set_use_wake_word(false);
            - micro_wake_word.start:
      - if:
          condition:
            and:
              - not:
                  - voice_assistant.is_running:
              - lambda: return id(wake_word_engine_location).state == "In Home Assistant";
          then:
            - lambda: id(va).set_use_wake_word(true);
            - voice_assistant.start_continuous:
  - id: stop_wake_word
    then:
      - if:
          condition:
            lambda: return id(wake_word_engine_location).state == "In Home Assistant";
          then:
            - lambda: id(va).set_use_wake_word(false);
            - voice_assistant.stop:
      - if:
          condition:
            lambda: return id(wake_word_engine_location).state == "On device";
          then:
            - micro_wake_word.stop:
