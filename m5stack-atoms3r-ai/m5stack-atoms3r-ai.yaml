# =============================================================================
# M5Stack AtomS3R-AI Voice Assistant Configuration
# =============================================================================
# Configuration Version: 2.1.0
# Last Updated: 2025-01-09
# Git Repository: https://github.com/dougmorato/wake-word-voice-assistants
# 
# This configuration turns your M5Stack AtomS3R-AI into a smart voice assistant
# that works with Home Assistant. It includes:
# - Voice wake word detection ("okay nabu", "hey mycroft", "hey jarvis")
# - Visual feedback on the built-in LCD screen
# - Audio playback for responses and notifications
# - Timer functionality with audio alerts
# - Physical button controls
# - WiFi connectivity with captive portal for easy setup
#
# The device can operate in two modes:
# 1. On-device wake word detection (faster, works offline)
# 2. Home Assistant wake word detection (more accurate, requires connection)
# =============================================================================

# =============================================================================
# CONFIGURATION VARIABLES
# =============================================================================
# Basic device configuration
substitutions:
  name: m5stack-atoms3r-ai
  friendly_name: M5Stack AtomS3R-AI

# =============================================================================
# CORE DEVICE CONFIGURATION
# =============================================================================
# This section defines the basic ESP32 settings and device information.

esphome:
  name: ${name}
  friendly_name: ${friendly_name}
  min_version: 2025.5.0
  name_add_mac_suffix: true
  # Device information that appears in Home Assistant
  project:
    name: "M5Stack.AtomS3R-AI"
    version: "2.3.0-simplified-fixed"
  # Actions to perform when the device starts up
  on_boot:
    priority: 600
    then:
      # Enable backlight on startup and force display update
      - light.turn_on: display_backlight
      - delay: 1s
      - component.update: atoms3r_lcd

# ESP32-S3 microcontroller configuration
# The S3 variant provides excellent performance for voice processing
esp32:
  board: esp32-s3-devkitc-1
  flash_size: 8MB
  cpu_frequency: 240MHz
  framework:
    type: esp-idf
    sdkconfig_options:
      CONFIG_ESP32S3_DEFAULT_CPU_FREQ_240: "y"
      CONFIG_ESP32S3_DATA_CACHE_64KB: "y"
      CONFIG_ESP32S3_DATA_CACHE_LINE_64B: "y"

# External RAM configuration - provides extra memory for audio processing
psram:
  mode: octal
  speed: 80MHz

# =============================================================================
# COMMUNICATION & CONNECTIVITY
# =============================================================================
# These components handle logging, API access, updates, and network connectivity

# Logging configuration - helps with debugging
logger:
  hardware_uart: USB_SERIAL_JTAG

# Home Assistant API - enables communication with your smart home system
api:

# Over-the-air updates - allows you to update the firmware wirelessly
ota:
  - platform: esphome
    id: ota_esphome

# WiFi configuration - connects your device to your home network
# The device will create a hotspot for initial setup if it can't connect
wifi:
  ap:

# Captive portal - provides a web interface for WiFi setup when in AP mode
captive_portal:

# =============================================================================
# HARDWARE INTERFACES
# =============================================================================
# These sections configure the physical connections to audio and display hardware

# I2C bus - connects to the audio codec for configuration
# GPIO38 = data line, GPIO39 = clock line
i2c:
  sda: GPIO38
  scl: GPIO39
  frequency: 100kHz  # Standard I2C frequency for ES8311
  scan: true         # Enable I2C device scanning

# I2S audio bus - temporarily disabled to fix display first
# i2s_audio:
#   - id: i2s_bus
#     i2s_lrclk_pin: GPIO6
#     i2s_bclk_pin: GPIO8

# =============================================================================
# AUDIO SYSTEM CONFIGURATION
# =============================================================================
# The audio system handles voice recording, playback, and processing

# ES8311 audio codec - completely disabled to prevent MCLK issues
# Will re-enable after fixing I2S configuration
# audio_dac:
#   - platform: es8311
#     id: es8311_codec
#     address: 0x18
#     sample_rate: 44100
#     bits_per_sample: 16bit
#     use_mclk: false
#     use_microphone: false

# All audio components temporarily disabled to focus on display fix
# Will re-enable once display is working

# microphone:
#   - platform: i2s_audio
#     id: atoms3r_mic
#     i2s_audio_id: i2s_bus
#     i2s_din_pin: GPIO7
#     adc_type: external
#     sample_rate: 16000
#     bits_per_sample: 16bit

# speaker:
#   - platform: i2s_audio
#     id: atoms3r_speaker
#     i2s_audio_id: i2s_bus  
#     i2s_dout_pin: GPIO5
#     dac_type: external
#     sample_rate: 16000
#     bits_per_sample: 16bit

# media_player:
#   - platform: speaker
#     id: media
#     name: "Voice Assistant"

# micro_wake_word:
#   id: mww
#   microphone: atoms3r_mic
#   models:
#     - model: okay_nabu

# voice_assistant:
#   id: va
#   microphone: atoms3r_mic
#   media_player: media
#   micro_wake_word: mww

# Basic controls - audio temporarily disabled
# switch:
#   - platform: template
#     name: "Mute"
#     id: mute_switch
#     optimistic: true
#     restore_mode: RESTORE_DEFAULT_OFF
#     on_turn_on:
#       - micro_wake_word.stop:
#     on_turn_off:
#       - micro_wake_word.start:

# Basic diagnostics
button:
  - platform: factory_reset
    name: Factory reset

binary_sensor:
  - platform: gpio
    pin:
      number: GPIO41
      mode: INPUT_PULLUP
      inverted: true
    name: Button
    on_press:
      - light.toggle: display_backlight

text_sensor:
  - platform: template
    name: "Configuration Version" 
    entity_category: diagnostic
    lambda: |-
      return {"Config v2.3.0 - Simplified & Fixed"};
  - platform: wifi_info
    ip_address:
      name: "IP Address"
      entity_category: diagnostic

# =============================================================================
# DISPLAY SYSTEM
# =============================================================================
# The LCD screen and visual interface components

# SPI bus configuration for the LCD display
# Pin configuration based on working S3 example
spi:
  - id: lcd_spi
    clk_pin: GPIO15             # SPI_SCK - Clock pin (M5Stack AtomS3R pinmap)
    mosi_pin: GPIO21            # SPI_MOSI - Data pin

# Simple color definition
color:
  - id: test_color
    red: 0%
    green: 50%
    blue: 100%

# Backlight control for display visibility - M5Stack AtomS3R-AI uses PWM for brightness control
output:
  - platform: ledc
    pin: GPIO16               # LCD_BL - Backlight pin from M5Stack pinmap
    id: backlight_pwm
    frequency: 1000Hz         # PWM frequency for smooth brightness control

# Display backlight - allows brightness control and ensures display is visible
light:
  - platform: monochromatic
    output: backlight_pwm
    name: "Display Backlight"
    id: display_backlight
    restore_mode: RESTORE_DEFAULT_ON  # Turn on backlight by default
    default_transition_length: 250ms  # Smooth brightness transitions

# LCD display configuration - Using ili9xxx with ST7789V model (from working S3 example)
display:
  - platform: ili9xxx
    model: ST7789V
    id: atoms3r_lcd
    dimensions:
      height: 128
      width: 128
      offset_height: 2
      offset_width: 1
    rotation: 180
    invert_colors: true          # Critical for proper colors on AtomS3R-AI
    cs_pin: GPIO14              # DISP_CS - Chip select (M5Stack AtomS3R pinmap)
    dc_pin: GPIO42              # DISP_RS - Data/command (M5Stack AtomS3R pinmap)
    reset_pin: GPIO48           # DISP_RST - Reset (M5Stack AtomS3R pinmap)
    update_interval: 5s     # More frequent updates to see changes
    lambda: |-
      // Bright test pattern that should be very visible
      it.fill(Color(255, 0, 0));  // Bright red background
      
      // Large white rectangle in center
      it.filled_rectangle(32, 32, 64, 64, Color(255, 255, 255));
      
      // Black text on white background
      it.printf(64, 50, id(font_small), Color(0, 0, 0), TextAlign::CENTER, "TEST");
      it.printf(64, 70, id(font_small), Color(0, 0, 0), TextAlign::CENTER, "DISPLAY");

# Font definitions for text display on screen
# Google Fonts are downloaded automatically during compilation
font:
  - id: font_small           # Larger text for main content
    file:
      type: gfonts           # Use Google Fonts
      family: Figtree        # Clean, readable font family
      weight: 400            # Regular weight
    size: 16                 # 16 pixel font size
  - id: font_tiny            # Smaller text for status information
    file:
      type: gfonts
      family: Figtree
      weight: 300            # Light weight for subtlety
    size: 12                 # 12 pixel font size

